#ifndef TINYCOLS_GRID_H
#define TINYCOLS_GRID_H

#include <stdbool.h>
#include <stdint.h>

#include "score.h"

#define GRID_DEFAULT_COLS 6
#define GRID_DEFAULT_ROWS 13
#define NOT_FOUND -1

/**
 * grid - The grid of a game.
 *
 * @param cols: The number of columns in this grid.
 * @param rows: The number of rows in this grid.
 * @param size: The size (number of cells) of this grid, i.e. rows * cols.
 * @param cells: The content of the cells of this grid.
 */
struct grid {
	int cols;
	int rows;
	int size;
	uint8_t cells[];
};

/**
 * grid_drop - A gap in the jewels that will cause the topmost to drop down
 *
 * @param row: The grid row the top of the group to drop.
 * @param col: The grid column the top of the group to drop.
 * @param n: The number of blocks to drop (that form the group).
 * @param h: The height of the drop.
 */
struct grid_drop {
	int row;
	int col;
	int n;
	int h;
};

/**
 * grid_alloc() - allocate and return a pointer to a grid
 *
 * @param rows: the number of rows in the grid
 * @param cols: the number of columns in the grid
 * @return the pointer to the newly allocated grid, or NULL if it fails.
 */
struct grid *grid_alloc(uint8_t rows, uint8_t cols);

/**
 * init_grid() - initialise an allocated grid()
 *
 * @param gr
 */
void grid_init(struct grid *gr);

/**
 * grid_remove_jewels() - Remove jewels from a grid based on a given buffer.
 *
 * @param gr: The grid to process.
 * @param jewels: A buffer containing markers for jewels to remove.
 *                This is generated by `grid_scan()`.
 * @return The number of jewels removed.
 */
uint16_t grid_remove_jewels(struct grid *gr, const uint8_t *jewels);

/**
 * grid_detect_drops() - Detect the drops in a given grid
 *
 * @param gr: The grid to inspect.
 * @param drs: An array of drops to populate with information.
 * @param max_drops: The max number of structs to initialize.
 *                   This must be equal to or less than the length of the
 *                   array.
 * @return The number of drops detected.
 */
unsigned int grid_detect_drops(const struct grid *gr, struct grid_drop *drs,
			       unsigned int max_drops);

/**
 * init_grid_drops() - Initialize an array of grid_drop structs.
 *
 * @param drs: A pointer to an array of grid_drop structs to initialize.
 * @param max_drops: The max number of structs to initialize.
 *                   This must be equal to or less than the length of the
 *                   array.
 */
void init_grid_drops(struct grid_drop *drs, unsigned int max_drops);

/**
 * grid_apply_drops() - Apply gravity to the grid contents using the given
 *                      information, provided by the drops array.
 *
 * @param gr: The grid to modify.
 * @param drs: The drops array buffer containing the information.
 * @param n_drops: The number of drops found.
 *                 Must be less that the number of drops in the above buffer.
 */
void grid_apply_drops(struct grid *gr, const struct grid_drop *drs,
		      unsigned int n_drops);

/**
 * grid_scan() - Scan the grid for jewels to remove and calculate the score.
 *
 * @param gr: The grid to inspect.
 * @param result: A buffer to use to record the result of the scan.
 *                This contains markers for the jewels to be removed later.
 *                This buffer must be as big as the grid itself.
 * @return The score based on what was found to be removed.
 */
game_score_t grid_scan(const struct grid *gr, uint8_t *result);

#endif // TINYCOLS_GRID_H
